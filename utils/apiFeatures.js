class APIFeatures {
  constructor(query, queryString) {
    this.query = query;
    this.queryString = queryString;
  }
  filter() {
    const queryObj = { ...this.queryString }; //destructuring
    const excludedFields = [
      'page',
      'sort',
      'limit',
      'fields',
    ];
    excludedFields.forEach(
      (el) => delete queryObj[el]
    );

    // 1B ADVANCED FILTERING
    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(
      /\b(gte|gt|lte|lt)\b/g,
      (match) => `$${match}`
    ); //to match exactly this
    this.query = this.query.find(JSON.parse(queryStr));
    //let query = Tour.find(JSON.parse(queryStr));
    return this;
  }
  sort() {
    if (this.queryString.sort) {
      const sortBy = this.queryString.sort
        .split(',')
        .join(' ');
      this.query = this.query.sort(sortBy);
    } else {
      this.query = this.query.sort('-createdAt'); //sort default for new tours to be at top
    }
    return this;
  }

  limitFields() {
    if (this.queryString.fields) {
      const fields = this.queryString.fields
        .split(',')
        .join(' ');
      this.query = this.query.select(fields);
    } else {
      this.query = this.query.select('-__v'); //exclude __v which is generated by mongodb to users
    }
    return this;
  }
  paginate() {
    const { page = 1, limit = 9 } = this.queryString;
    // const page = parseInt(this.queryString.page) || 1;
    // const limit =
    //   parseInt(this.queryString.limit) || 100;
    // const skip = (page - 1) * limit;
    this.query = this.query
      .limit(limit * 1)
      .skip((page - 1) * limit);
    return this;
  }
}
module.exports = APIFeatures;
